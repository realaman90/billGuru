// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  phone          String
  address        String
  vat            String
  businessNumber String
  pinCode        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  clients        Client[]
  senders        Sender[]
  invoices       Invoice[]
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  newsletter    Boolean   @default(false)
  image         String?
  password      String?
  role          String?
  paymentStatus String?
  accounts      Account[]
  sessions      Session[]
  companies     Company[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

model Client {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  phone          String
  address        String
  vat            String
  businessNumber String
  pinCode        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  invoices       Invoice[]
  companyId      String
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Sender {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  phone          String
  address        String
  vat            String
  businessNumber String
  pinCode        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  invoices       Invoice[]
  companyId      String
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  tax         Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  number    String
  details   Details
  status    String
  sender    Sender       @relation(fields: [senderId], references: [id])
  senderId  String       @db.ObjectId
  client    Client?      @relation(fields: [clientId], references: [id])
  clientId  String?      @db.ObjectId
  items     singleItem[]
  fees      Fee[]
  total     Float
  companyId String
  company   Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

type singleItem {
  id             String
  name           String
  description    String
  quantity       Float
  amount         Float
  rate           Float
  discountAmount Float
  itemTax        Tax
  discount       Float
}

type Tax {
  id     String
  name   String
  cgst   Float?
  sgst   Float?
  igst   Float?
  amount Float
}

type Details {
  dueDate       String
  invoiceDate   String
  invoiceNumber String
  logo          String
}

type Fee {
  name   String
  tax    Float
  amount Float
}
